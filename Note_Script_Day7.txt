================================
üõ¥ Workshop .NET 8 with NextJS14  üõ¥
================================
‚úà DAY 1
-------------------------------------------------------
1: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ö‡∏ô Mac ‡πÅ‡∏•‡∏∞ Windows
2: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ .NET Core 8
3: ‡∏™‡∏£‡πâ‡∏≤‡∏á .NET 8 Rest API
-------------------------------------------------------
üõ†1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
üíª .NET SDK 8.x
---
dotnet --version

üíª Node JS 18.x and up
---
node -v
npm -v

üíª PostgreSQL 15 and up
---
psql --version

üíª Docker Desktop
---
docker --version

üíª Git
---
git version

üíª VSCode
---
code -v

2: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ .NET Core 8
---
‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà .NET 6 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡∏°‡∏≤ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡πÑ‡∏î‡πâ 2 approaches ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ 

1. controller-based APIs
2. minimal APIs

Minimal API: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ quickly ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö

Controller-based API: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏™‡∏π‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

Minimal API:
---
‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:

‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å
‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ lambda expression
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö async/await ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

‡∏à‡∏∏‡∏î‡∏î‡πâ‡∏≠‡∏¢:

‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏µ‡∏à‡∏≥‡∏Å‡∏±‡∏î
‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ routing ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô

Controller-based API:
---
‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:

‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏á‡πà‡∏≤‡∏¢
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö middleware
‡∏à‡∏∏‡∏î‡∏î‡πâ‡∏≠‡∏¢:

‡πÇ‡∏Ñ‡πâ‡∏î‡∏¢‡∏≤‡∏ß ‡∏¢‡∏∏‡πà‡∏á‡∏¢‡∏≤‡∏Å
‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤ Minimal API

3: ‡∏™‡∏£‡πâ‡∏≤‡∏á .NET 8 Rest API

üöÄ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå .NET Core Web API ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô .NET 8
---
Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏ö‡∏£‡∏°‡∏ô‡∏µ‡πâ
---
mkdir NetCoreWithNextJS

Step 2: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
---
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Web APIs ‡πÅ‡∏ö‡∏ö Minimal APIs
---
dotnet new webapi -o MinimalAPI

‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Web APIs ‡πÅ‡∏ö‡∏ö Controller-based APIs
---
dotnet new webapi --use-controllers -o ControllerAPI

Step 3: ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô VSCode
---
code MinimalAPI
or
code ControllerAPI

Step 4: ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
---
dotnet watch run

üíª ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á REST API ‡∏î‡πâ‡∏ß‡∏¢ .NET Web API ‡πÅ‡∏ö‡∏ö Controller-base APIs
---
Step 1: ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå ControllerAPI ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå Controller/WeatherForecastController.cs
‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå WeatherForecast.cs

Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á model ‡πÉ‡∏ô Models/User
---
namespace WebApi.Models;
public class User
{
    public int Id { get; set; }
    public required string Username { get; set; }
    public required string Email { get; set; }
    public required string Fullname { get; set; }
}


Step 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á UserController ‡πÉ‡∏ô Controllers
---
using Microsoft.AspNetCore.Mvc;
using WebApi.Models;

namespace WebApi.Controllers;

[ApiController]
[Route("api/[controller]")] // api/User
public class UserController : ControllerBase
{
    // mock data for users
    private static readonly List<User> _users = new List<User>
    {
        new User { 
            Id = 1, 
            Username = "john", 
            Email = "john@email.com", 
            Fullname = "John Doe"
        },
        new User { 
            Id = 2, 
            Username = "samit", 
            Email = "samit@email.com", 
            Fullname = "Samit Koyom"
        },
    };

    // GET: api/User
    [HttpGet]
    public ActionResult<IEnumerable<User>> GetUsers()
    {
        // IEnumerable ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
        // IEnumerable ‡πÄ‡∏õ‡πá‡∏ô interface ‡πÉ‡∏ô .NET Framework ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô collection ‡∏Ç‡∏≠‡∏á object
        // interface ‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î method ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡∏∑‡∏≠ GetEnumerator()
        // GetEnumerator() : method ‡∏ô‡∏µ‡πâ return enumerator
        // enumerator : object ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡∏ú‡πà‡∏≤‡∏ô collection
        // ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ IEnumerable ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á users

        // ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡∏ú‡πà‡∏≤‡∏ô collection ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ foreach
        // foreach (var user in _users)
        // {
        //     Console.WriteLine($"{user.Id} - {user.Username}");
        // }

        return Ok(_users);
    }

    // GET: api/User/{id}
    [HttpGet("{id}")]
    public ActionResult<User> GetUser(int id)
    {
        var user = _users.Find(u => u.Id == id); // find user by id
        if (user == null)
        {
            return NotFound();
        }
        return Ok(user);
    }


    // POST: api/User
    [HttpPost]
    public ActionResult<User> CreateUser([FromBody] User user)
    {
        _users.Add(user);
        return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user);
    }

    // PUT: api/User/{id}
    [HttpPut("{id}")]
    public IActionResult UpdateUser(int id, [FromBody] User user)
    {
        // Validate user id
        if (id != user.Id)
        {
            return BadRequest();
        }

        // Find existing user
        var existingUser = _users.Find(u => u.Id == id);
        if (existingUser == null)
        {
            return NotFound();
        }

        // Update user
        existingUser.Username = user.Username;
        existingUser.Email = user.Email;
        existingUser.Fullname = user.Fullname;

        // Return updated user
        return Ok(existingUser);
    }

    // DELETE: api/User/2
    [HttpDelete("{id}")]
    public ActionResult DeleteUser(int id)
    {
        // Find existing user
        var user = _users.Find(u => u.Id == id);

        if (user == null)
        {
            return NotFound();
        }

        // Remove user from list
        _users.Remove(user);
        return NoContent();
    }


}

-------------------------------------------------------
‚úà DAY 2
4:  Entity Framework Core ‡πÉ‡∏ô .NET 8 
5: .NET 8 Rest API CRUD with EFCore
-------------------------------------------------------
üöÄ WORKSHOP: StoreAPI with EF8 and PostgreSQL

"‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô EFCore ‡πÅ‡∏ö‡∏ö Database first"

Step 1: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PostgresSQL
---
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ‡∏ä‡∏∑‡πà‡∏≠ "storedb"
---
CREATE DATABASE storedb;

Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á "categories" ‡πÅ‡∏•‡∏∞ "products"
---
Category table query
---
CREATE TABLE categories (
  category_id SERIAL PRIMARY KEY,
  category_name VARCHAR(128) NOT NULL,
  category_status INTEGER NOT NULL
);

Products table query
---
CREATE TABLE products (
  product_id SERIAL PRIMARY KEY,
  category_id INTEGER REFERENCES categories(category_id) ON DELETE SET NULL,
  product_name VARCHAR(50),
  unit_price DECIMAL(18, 0),
  product_picture VARCHAR(1024),
  unit_in_stock INTEGER,
  created_date TIMESTAMP,
  modified_date TIMESTAMP
);

Step 3: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á categories ‡πÅ‡∏•‡∏∞ products
---
categories
---
INSERT INTO categories (
    category_name,
    category_status
)

VALUES
(
    'Mobile',
    1
),
(
    'Tablet',
    1
),
(
    'Smart Watch',
    1
),
(
    'Labtop',
    1
);

products
---
INSERT INTO products (
    category_id,
    product_name,
    unit_price,
    product_picture,
    unit_in_stock,
    created_date,
    modified_date
)

VALUES
(
    1,
    'iPhone 13 Pro Max',
    55000,
    'https://www.mxphone.com/wp-content/uploads/2021/04/41117-79579-210401-iPhone12ProMax-xl-1200x675.jpg',
    3,
    '2021-11-22T00:00:00',
    '2021-11-22T00:00:00'
),
(
    2,
    'iPad Pro 2021',
    18500,
    'https://cdn.siamphone.com/spec/apple/images/ipad_pro_12.9%E2%80%91inch/com_1.jpg',
    10,
    '2021-11-20T00:00:00',
    '2021-11-20T00:00:00'
),
(
    3,
    'Airpods Pro',
    12500,
    'https://support.apple.com/library/content/dam/edam/applecare/images/en_US/airpods/airpods-pro-2gen-front-case.png',
    5,
    '2021-11-10T10:30:00',
    '2021-11-12T10:30:00'
),
(
    4,
    'Macbook Pro M1',
    45000,
    'https://cdn.mos.cms.futurecdn.net/iYCQTPgBSdDmkYESfPkunh.jpg',
    10,
    '2021-11-15T10:30:00',
    '2021-11-15T10:30:00'
);


Step 4: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå Web API ‡πÅ‡∏ö‡∏ö Controller-base APIs
---
dotnet new webapi --use-controllers -o StoreAPI

Step 5: ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ VSCode
---
code StoreAPI -r

Step 6: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
---
dotnet watch run

Step 7: Install NuGet Packages for EF8 and Postgresql
---
dotnet add package Microsoft.EntityFrameworkCore --version 8.0.0

dotnet add package Microsoft.EntityFrameworkCore.Design --version 8.0.0

dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL --version 8.0.0

dotnet add package Microsoft.EntityFrameworkCore.Relational --version 8.0.0

Step 8: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á dotnet-ef cli
---
‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
dotnet ef --version

‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô
dotnet tool install --global dotnet-ef

‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
dotnet tool update --global dotnet-ef

Step 9: ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Scaffold-DbContext ( Reverse engineer)
---
Windows Command Prompt
---
dotnet ef dbcontext scaffold "Host=localhost;Port=5432;Database=storedb;Username=postgres;Password=123456" ^
Npgsql.EntityFrameworkCore.PostgreSQL ^
--output-dir "Models" ^
--context ApplicationDbContext ^
--use-database-names ^
--no-onconfiguring ^
--force


MacOS/Linux Terminal
---
dotnet ef dbcontext scaffold "Host=localhost;Port=5432;Database=storedb;Username=postgres;Password=123456" \
Npgsql.EntityFrameworkCore.PostgreSQL \
--output-dir "Models" \
--context ApplicationDbContext \
--use-database-names \
--no-onconfiguring \
--force

Step 10: ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå ApplicationDbContext ‡πÑ‡∏õ‡πÑ‡∏ß‡πâ‡∏¢‡∏±‡∏á Data/ApplicationDbContext.cs
--
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using StoreAPI.Models;

namespace StoreAPI.Data;

public partial class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<category> categories { get; set; }

    public virtual DbSet<product> products { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<category>(entity =>
        {
            entity.HasKey(e => e.category_id).HasName("categories_pkey");

            entity.Property(e => e.category_name).HasMaxLength(128);
        });

        modelBuilder.Entity<product>(entity =>
        {
            entity.HasKey(e => e.product_id).HasName("products_pkey");

            entity.Property(e => e.created_date).HasColumnType("timestamp without time zone");
            entity.Property(e => e.modified_date).HasColumnType("timestamp without time zone");
            entity.Property(e => e.product_name).HasMaxLength(50);
            entity.Property(e => e.product_picture).HasMaxLength(1024);
            entity.Property(e => e.unit_price).HasPrecision(18);

            entity.HasOne(d => d.category).WithMany(p => p.products)
                .HasForeignKey(d => d.category_id)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("products_category_id_fkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}


Step 11: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Connection String ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PostgreSQL ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå appsettings.json
---
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Port=5432;Database=storedb;Username=postgres;Password=123456"
  },
  "AllowedHosts": "*"
}

Step 12: ‡πÄ‡∏û‡∏¥‡πà‡∏° Config "DefaultConnection" ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå Program.cs
---
using Microsoft.EntityFrameworkCore;
using StoreAPI.Data;
.
.
// For Entity Framework with Npgsql
builder.Services.AddDbContext<ApplicationDbContext>(options =>
{
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection"));
});

Step 13: ‡∏™‡∏£‡πâ‡∏≤‡∏á ProductController.cs
---
using Microsoft.AspNetCore.Mvc;
using StoreAPI.Data;
using StoreAPI.Models;

namespace StoreAPI.Controllers;

[ApiController]
[Route("api/[controller]")]
public class ProductController : ControllerBase
{
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Object ‡∏Ç‡∏≠‡∏á ApplicationDbContext
    private readonly ApplicationDbContext _context;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Constructor ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ ApplicationDbContext
    public ProductController(ApplicationDbContext context)
    {
        _context = context;
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
    // GET: /api/Product/testconnectdb
    [HttpGet("testconnectdb")]
    public void TestConnection()
    {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Connected"
        if (_context.Database.CanConnect())
        {
            Response.WriteAsync("Connected");
        }
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "Not Connected"
        else
        {
            Response.WriteAsync("Not Connected");
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    // GET: /api/Product
    [HttpGet]
    public ActionResult<product> GetProducts()
    {
        // LINQ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á Products ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        // var products = _context.products.ToList();

        // ‡πÅ‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        // var products = _context.products.Where(p => p.unit_price > 45000).ToList();

        // ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô products ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö categories
        var products = _context.products
            .Join(
                _context.categories,
                p => p.category_id,
                c => c.category_id,
                (p, c) => new
                {
                    p.product_id,
                    p.product_name,
                    p.unit_price,
                    p.unit_in_stock,
                    c.category_name
                }
            ).ToList();

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        return Ok(products);
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° id
    // GET: /api/Product/{id}
    [HttpGet("{id}")]
    public ActionResult<product> GetProduct(int id)
    {
        // LINQ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á Products ‡∏ï‡∏≤‡∏° id
        var product = _context.products.FirstOrDefault(p => p.product_id == id);

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Not Found
        if (product == null)
        {
            return NotFound();
        }

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        return Ok(product);
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    // POST: /api/Product
    [HttpPost]
    public ActionResult<product> CreateProduct(product product)
    {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á Products
        _context.products.Add(product);
        _context.SaveChanges();

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        return Ok(product);
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    // PUT: /api/Product/{id}
    [HttpPut("{id}")]
    public ActionResult<product> UpdateProduct(int id, product product)
    {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° id
        var existingProduct = _context.products.FirstOrDefault(p => p.product_id == id);

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Not Found
        if (existingProduct == null)
        {
            return NotFound();
        }

        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        existingProduct.product_name = product.product_name;
        existingProduct.unit_price = product.unit_price;
        existingProduct.unit_in_stock = product.unit_in_stock;
        existingProduct.category_id = product.category_id;

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        _context.SaveChanges();

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        return Ok(existingProduct);
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    // DELETE: /api/Product/{id}
    [HttpDelete("{id}")]
    public ActionResult<product> DeleteProduct(int id)
    {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° id
        var product = _context.products.FirstOrDefault(p => p.product_id == id);

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Not Found
        if (product == null)
        {
            return NotFound();
        }

        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        _context.products.Remove(product);
        _context.SaveChanges();

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        return Ok(product);
    }

}

-------------------------------------------------------
‚úà DAY 3
5: .NET 8 Rest API CRUD Upload File
6: .NET 8 JWT and Swagger
-------------------------------------------------------
‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Authentication ‡∏î‡πâ‡∏ß‡∏¢ JWT
---
Step 1: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Package ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
---
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 8.0.0

dotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.0

dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version 8.0.0

Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå RegisterModel.cs
---
using System.ComponentModel.DataAnnotations;

namespace StoreAPI.Models;

public class RegisterModel
    {
    [Required(ErrorMessage = "User Name is required")]
    public required string Username { get; set; }

    [EmailAddress]
    [Required(ErrorMessage = "Email is required")]
    public required string Email { get; set; }

    [Required(ErrorMessage = "Password is required")]
    public required string Password { get; set; }
}

Step 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå LoginModel.cs
---
using System.ComponentModel.DataAnnotations;

namespace StoreAPI.Models;

public class LoginModel
{
    [Required(ErrorMessage = "User Name is required")]
    public string? Username { get; set; }

    [Required(ErrorMessage = "Password is required")]
    public string? Password { get; set; }
}


Step 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå UserRoles.cs
---
namespace StoreAPI.Models;

public class UserRoles
{
    public const string Admin = "Admin";
    public const string User = "User";
}

Step 5: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Response.cs ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å API
----
namespace StoreAPI.Models;

public class Response
{
    public string? Status { get; set; }
    public string? Message { get; set; }
}

Step 6: ‡∏™‡∏£‡πâ‡∏≤‡∏á Controller ‡∏ä‡∏∑‡πà‡∏≠ "AuthenticateController"
---
Controllers/AuthenticateController.cs

using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using StoreAPI.Models;

namespace StoreAPI.Controllers;

[ApiController]
[Route("api/[controller]")]
public class AuthenticateController : ControllerBase
{

    private readonly UserManager<IdentityUser> _userManager;
    private readonly RoleManager<IdentityRole> _roleManager;
    private readonly IConfiguration _configuration;

    // Constructor
    public AuthenticateController(
        UserManager<IdentityUser> userManager,
        RoleManager<IdentityRole> roleManager,
        IConfiguration configuration)
    {
        _userManager = userManager;
        _roleManager = roleManager;
        _configuration = configuration;
    }

    // Register for normal user
    [HttpPost]
    [Route("register")]
    public async Task<IActionResult> Register([FromBody] RegisterModel model)
    {
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ username ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        var userExist = await _userManager.FindByNameAsync(model.Username);
        if (userExist != null)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError, 
                new Response { 
                    Status = "Error", 
                    Message = "User already exist!" 
                }
            );
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ email ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        IdentityUser user = new()
        {
            Email = model.Email,
            SecurityStamp = Guid.NewGuid().ToString(),
            UserName = model.Username
        };

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà
        var result = await _userManager.CreateAsync(user, model.Password);

        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if (!result.Succeeded){
            return StatusCode(
                StatusCodes.Status500InternalServerError, 
                new Response { 
                    Status = "Error", 
                    Message = "User creation failed! Please check user details and try again." 
                }
            );
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        return Ok(new Response { 
            Status = "Success", 
            Message = "User created successfully!" 
        });
    }

    // Register for admin
    [HttpPost]
    [Route("register-admin")]
    public async Task<IActionResult> RegisterAdmin([FromBody] RegisterModel model)
    {
        var userExists = await _userManager.FindByNameAsync(model.Username!);
        if (userExists != null)
            return StatusCode(
                StatusCodes.Status500InternalServerError, 
                new Response { 
                    Status = "Error", 
                    Message = "User already exists!" 
                }
            );

        IdentityUser user = new()
        {
            Email = model.Email,
            SecurityStamp = Guid.NewGuid().ToString(),
            UserName = model.Username
        };

        var result = await _userManager.CreateAsync(user, model.Password!);

        if (!result.Succeeded)
            return StatusCode(
                StatusCodes.Status500InternalServerError, 
                new Response { 
                    Status = "Error", 
                    Message = "User creation failed! Please check user details and try again." 
                }
            );

        if (!await _roleManager.RoleExistsAsync(UserRoles.Admin))
            await _roleManager.CreateAsync(new IdentityRole(UserRoles.Admin));
        if (!await _roleManager.RoleExistsAsync(UserRoles.Manager))
            await _roleManager.CreateAsync(new IdentityRole(UserRoles.Manager));
        if (!await _roleManager.RoleExistsAsync(UserRoles.User))
            await _roleManager.CreateAsync(new IdentityRole(UserRoles.User));

        return Ok(new Response { Status = "Success", Message = "User created successfully!" });
    }

    // Login
    [HttpPost]
    [Route("login")]
    public async Task<IActionResult> Login([FromBody] LoginModel model)
    {
        var user = await _userManager.FindByNameAsync(model.Username!);

        // ‡∏ñ‡πâ‡∏≤ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if (user != null && await _userManager.CheckPasswordAsync(user, model.Password!))
        {
            var userRoles = await _userManager.GetRolesAsync(user);

            var authClaims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.UserName!),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
            };

            foreach (var userRole in userRoles)
            {
                authClaims.Add(new Claim(ClaimTypes.Role, userRole));
            }

            var token = GetToken(authClaims);

            return Ok(new
            {
                token = new JwtSecurityTokenHandler().WriteToken(token),
                expiration = token.ValidTo
            });
        }

        // ‡∏ñ‡πâ‡∏≤ login ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        return Unauthorized();
    }

    // Method for generating JWT token
    private JwtSecurityToken GetToken(List<Claim> authClaims)
    {
        var authSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["JWT:Secret"]!));

        var token = new JwtSecurityToken(
            issuer: _configuration["JWT:ValidIssuer"],
            audience: _configuration["JWT:ValidAudience"],
            expires: DateTime.Now.AddDays(1),
            claims: authClaims,
            signingCredentials: new SigningCredentials(authSigningKey, SecurityAlgorithms.HmacSha256)
        );
        return token; 
    }
}

Step 7: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå Data/ApplicationDbContext.cs
---
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using StoreAPI.Models;

namespace StoreAPI.Data;
public partial class ApplicationDbContext : IdentityDbContext<IdentityUser>
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<category> categories { get; set; }

    public virtual DbSet<product> products { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        base.OnModelCreating(modelBuilder);

        modelBuilder.Entity<category>(entity =>
        {
            entity.HasKey(e => e.category_id).HasName("categories_pkey");

            entity.Property(e => e.category_name).HasMaxLength(128);
        });

        modelBuilder.Entity<product>(entity =>
        {
            entity.HasKey(e => e.product_id).HasName("products_pkey");

            entity.Property(e => e.created_date).HasColumnType("timestamp without time zone");
            entity.Property(e => e.modified_date).HasColumnType("timestamp without time zone");
            entity.Property(e => e.product_name).HasMaxLength(50);
            entity.Property(e => e.product_picture).HasMaxLength(1024);
            entity.Property(e => e.unit_price).HasPrecision(18);

            entity.HasOne(d => d.category).WithMany(p => p.products)
                .HasForeignKey(d => d.category_id)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("products_category_id_fkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}


Step 8: ‡πÄ‡∏û‡∏¥‡πà‡∏° JWT ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå appsettings.json
---
"JWT": {  
    "ValidAudience": "http://localhost:4200",  
    "ValidIssuer": "http://localhost:21785",  
    "Secret": "ByYM000OLlMQG6VVVp1OH7Xzyr7gHuw1qvUC5dcGt3SNM"  
  },

Step 9: ‡πÄ‡∏û‡∏¥‡πà‡∏° Config ‡∏Ç‡∏≠‡∏á JWT ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Program.cs
---
.
.
// Adding Identity
builder.Services.AddIdentity<IdentityUser, IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>()
    .AddDefaultTokenProviders();

// Adding Authentication
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
})
// Adding Jwt Bearer
.AddJwtBearer(options =>
{
    options.SaveToken = true;
    options.RequireHttpsMetadata = false;
    options.TokenValidationParameters = new TokenValidationParameters()
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidAudience = builder.Configuration.GetSection("JWT:ValidAudience").Value!,
        ValidIssuer = builder.Configuration.GetSection("JWT:ValidIssuer").Value!,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration.GetSection("JWT:Secret").Value!))
    };
});

.
.
// Add Authentication
app.UseAuthentication();

Step 10: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå Migration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Auth
---
dotnet ef migrations add auth --context ApplicationDbContext

Step 11: ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Migrate ‡∏ï‡∏±‡∏ß Migration ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
---
dotnet ef database update

-------------------------------------------------------
‚úà DAY 4
Section 6:  .NET 8 JWT and Swagger (‡∏ï‡πà‡∏≠)
-------------------------------------------------------
Step 1: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á categories ‡πÅ‡∏•‡∏∞ products
---
categories
---
INSERT INTO categories (
    category_name,
    category_status
)

VALUES
(
    'Mobile',
    1
),
(
    'Tablet',
    1
),
(
    'Smart Watch',
    1
),
(
    'Labtop',
    1
);

products
---
INSERT INTO products (
    category_id,
    product_name,
    unit_price,
    product_picture,
    unit_in_stock,
    created_date,
    modified_date
)

VALUES
(
    1,
    'iPhone 13 Pro Max',
    55000,
    'https://www.mxphone.com/wp-content/uploads/2021/04/41117-79579-210401-iPhone12ProMax-xl-1200x675.jpg',
    3,
    '2021-11-22T00:00:00',
    '2021-11-22T00:00:00'
),
(
    2,
    'iPad Pro 2021',
    18500,
    'https://cdn.siamphone.com/spec/apple/images/ipad_pro_12.9%E2%80%91inch/com_1.jpg',
    10,
    '2021-11-20T00:00:00',
    '2021-11-20T00:00:00'
),
(
    3,
    'Airpods Pro',
    12500,
    'https://support.apple.com/library/content/dam/edam/applecare/images/en_US/airpods/airpods-pro-2gen-front-case.png',
    5,
    '2021-11-10T10:30:00',
    '2021-11-12T10:30:00'
),
(
    4,
    'Macbook Pro M1',
    45000,
    'https://cdn.mos.cms.futurecdn.net/iYCQTPgBSdDmkYESfPkunh.jpg',
    10,
    '2021-11-15T10:30:00',
    '2021-11-15T10:30:00'
);

Step 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö register , register-admin ‡πÅ‡∏•‡∏∞ login
---
‡∏ó‡∏î‡∏™‡∏≠‡∏ö Register
---
http://localhost:5053/api/Authenticate/register

Payload:
---
{
  "username": "iamsamit",
  "email": "samit@email.com",
  "password": "Samit@1234"
}

‡∏à‡∏∞‡πÑ‡∏î‡πâ Result
---
{
  "status": "Success",
  "message": "User created successfully!"
}

‡∏ó‡∏î‡∏™‡∏≠‡∏ö Register Admin
---
http://localhost:5143/api/Authenticate/register-admin

Payload:
---
{
  "username": "iamadmin",
  "email": "admin@email.com",
  "password": "Admin@1234"
}

‡∏à‡∏∞‡πÑ‡∏î‡πâ Result
---
{
  "status": "Success",
  "message": "User created successfully!"
}

‡∏ó‡∏î‡∏™‡∏≠‡∏ö Login
---
http://localhost:5156/api/Authenticate/login

Payload:
---
{
  "username": "iamsamit",
  "password": "Samit@1234"
}

‡∏à‡∏∞‡πÑ‡∏î‡πâ Result
---
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoiaWFtc2FtaXQiLCJqdGkiOiI3ZGYxYmY3Ni1mNTVhLTQ2MTEtOGI3Zi00MTYyZmIxZjYyOGYiLCJleHAiOjE3MTE2Mzc3NTYsImlzcyI6IioiLCJhdWQiOiIqIn0.7qgVoMcGLu24qsffNcKa9Bi70-aPAykzlwBtE5dbF64",
  "expiration": "2024-03-28T14:55:56Z"
}

Step 3: ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î Authorize ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Controller ‡∏´‡∏£‡∏∑‡∏≠ Method ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
---
‡πÅ‡∏Å‡πâ‡πÑ‡∏ü‡∏•‡πå ProductController.cs ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á 
[Authorize]
---
using Microsoft.AspNetCore.Authorization;
.
.

[Authorize] // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏ï‡πâ‡∏≠‡∏á Login ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á API ‡∏ô‡∏µ‡πâ
.
.
public class ProductController: ControllerBase
{
.
.
}

Step 4: ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î Authorize JWT ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà Swagger
---
using Microsoft.OpenApi.Models;

builder.Services.AddSwaggerGen(opt => 
    {
        opt.SwaggerDoc(
            "v1",
            new Microsoft.OpenApi.Models.OpenApiInfo
            {
                Title = "Store API with .NET 8 and PostgreSQL",
                Description = "Sample Store API with .NET 8 and PostgreSQL",
            }
        );

        opt.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme()
        {
            Name = "Authorization",
            Type = SecuritySchemeType.ApiKey,
            Scheme = "Bearer",
            BearerFormat = "JWT",
            In = ParameterLocation.Header,
            Description = "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 12345abcdef\"",
        });

        opt.AddSecurityRequirement(new OpenApiSecurityRequirement
        {
            {
                new OpenApiSecurityScheme
                {
                    Reference = new OpenApiReference
                    {
                        Type = ReferenceType.SecurityScheme,
                        Id = "Bearer"
                    }
                },
                new string[] {}

            }
        });
    }
);

Step 5: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå AuthenticateController.cs ‡πÄ‡∏û‡∏¥‡πà‡∏° register-roles, register-manager , refresh-token and logout
---
    // Register Role
    [HttpPost]
    [Route("register-role")]
    public async Task<IActionResult> RegisterRole([FromBody] RegisterRoleModel model)
    {
        if (!await _roleManager.RoleExistsAsync(model.Role))
            await _roleManager.CreateAsync(new IdentityRole(model.Role));

        return Ok(new Response { Status = "Success", Message = "Role created successfully!" });
    }

---
// Register for manager
    [HttpPost]
    [Route("register-manager")]
    public async Task<IActionResult> RegisterManager([FromBody] RegisterModel model)
    {
        var userExists = await _userManager.FindByNameAsync(model.Username!);
        if (userExists != null)
            return StatusCode(
                StatusCodes.Status500InternalServerError, 
                new Response { 
                    Status = "Error", 
                    Message = "User already exists!" 
                }
            );

        IdentityUser user = new()
        {
            Email = model.Email,
            SecurityStamp = Guid.NewGuid().ToString(),
            UserName = model.Username
        };

        var result = await _userManager.CreateAsync(user, model.Password!);

        if (!result.Succeeded)
            return StatusCode(
                StatusCodes.Status500InternalServerError, 
                new Response { 
                    Status = "Error", 
                    Message = "User creation failed! Please check user details and try again." 
                }
            );

        if (!await _roleManager.RoleExistsAsync(UserRoles.Admin))
            await _roleManager.CreateAsync(new IdentityRole(UserRoles.Admin));
        if (!await _roleManager.RoleExistsAsync(UserRoles.Manager))
            await _roleManager.CreateAsync(new IdentityRole(UserRoles.Manager));
        if (!await _roleManager.RoleExistsAsync(UserRoles.User))
            await _roleManager.CreateAsync(new IdentityRole(UserRoles.User));

        return Ok(new Response { Status = "Success", Message = "User created successfully!" });
    }

---
// Refresh Token
    [HttpPost]
    [Route("refresh-token")]
    public IActionResult RefreshToken([FromBody] RefreshTokenModel model)
    {
        var authHeader = Request.Headers["Authorization"];
        if (authHeader.ToString().StartsWith("Bearer"))
        {
            var token = authHeader.ToString().Substring(7);
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_configuration["JWT:Secret"]!);

            try
            {
                tokenHandler.ValidateToken(token, new TokenValidationParameters
                {
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(key),
                    ValidateIssuer = false,
                    ValidateAudience = false,
                    ValidateLifetime = false,
                    ClockSkew = TimeSpan.Zero
                }, out SecurityToken validatedToken);

                var jwtToken = (JwtSecurityToken)validatedToken;
                var user = new
                {
                    Name = jwtToken.Claims.First(x => x.Type == "unique_name").Value,
                    Role = jwtToken.Claims.First(x => x.Type == ClaimTypes.Role).Value
                };

                var authClaims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, user.Name),
                    new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
                    new Claim(ClaimTypes.Role, user.Role)
                };

                var newToken = GetToken(authClaims);
                return Ok(new
                {
                    token = new JwtSecurityTokenHandler().WriteToken(newToken),
                    expiration = newToken.ValidTo
                });
            }
            catch
            {
                return Unauthorized();
            }
        }

        return Unauthorized();
    }

---
    [HttpPost]
    [Route("logout")]
    public async Task<IActionResult> Logout()
    {
        var userName = User.Identity?.Name;
        if (userName != null)
        {
            var user = await _userManager.FindByNameAsync(userName);
            if (user != null)
            {
                await _userManager.UpdateSecurityStampAsync(user);
                return Ok(new Response { Status = "Success", Message = "User logged out!" });
            }
        }
        return Ok();
    }
---

-------------------------------------------------------
‚úà DAY 5
Section 7: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô NextJS 14 Framework
Section 8: ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Router ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà NextJS 14 AppRouter
-------------------------------------------------------
‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô NextJS 14 Framework
---
What new in Next.JS 13 
- App Directory
- Layout
- React Server Component
- Streaming
- Turbopack
- next/image
- @next/font
- next/link
What new in Next.JS 14
- Tubopack
- Server Action (stable)
- Partial Prerendering

‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Router ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà NextJS 14 AppRouter
---
‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (29/3/24) ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô Next.js ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏≤‡πÄ‡∏ï‡∏≠‡∏£‡πå 2 ‡πÅ‡∏ö‡∏ö ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ

App router - ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
Page router - ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤

‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏£‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ App Router ‡πÄ‡∏£‡∏≤‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á React ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡∏°‡∏≤‡∏à‡∏≤‡∏Å Page Router ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

Next.js 13 ‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ App Router ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Routing ‡πÅ‡∏ï‡πà Pages Router ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà

‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô

App Router: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Routing ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
Pages Router: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Routing ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö

App Router: ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£ Routing ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
Pages Router: ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£ Routing ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô useRouter

‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pages Router (pages folder) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ useRouter ‡∏à‡∏≤‡∏Å next/router
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö App Router (app folder) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ useRouter ‡∏à‡∏≤‡∏Å next/navigation

‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô New Project Next.JS 14 with App Router
---
Step 0: ‡πÄ‡∏ä‡πá‡∏Ñ Node Version ‡∏ï‡πâ‡∏≠‡∏á 18.17 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
---
node -v

Step 1: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Next.JS 14
---
‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
---
npx create-next-app@latest

‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
---
npx create-next-app@14.1.4

‚úî What is your project named? ‚Ä¶sample-next14-app-router
‚úî Would you like to use TypeScript? ‚Ä¶ Yes
‚úî Would you like to use ESLint? ‚Ä¶  Yes
‚úî Would you like to use Tailwind CSS? ‚Ä¶ Yes
‚úî Would you like to use `src/` directory? ‚Ä¶ Yes
‚úî Would you like to use App Router? (recommended) ‚Ä¶ Yes
‚úî Would you like to customize the default import alias (@/*)? ‚Ä¶ No

Step 2: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô path ‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏ï‡∏Å‡πå
---
cd sample-next14-app-router

Step 3: ‡∏™‡∏±‡πà‡∏á run ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÅ‡∏ö‡∏ö Development mode
---
npm run dev

Step 4: ‡∏™‡∏±‡πà‡∏á build ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
---
npm run build

‡∏™‡∏±‡πà‡∏á run ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÅ‡∏ö‡∏ö Production mode
---
npm start

Step 5: ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÄ‡∏Ç‡πâ‡∏≤ VS Code
---
code .

Step 6: ‡πÅ‡∏Å‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏ô‡πâ‡∏≤ page.tsx ‡∏•‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏•‡∏á‡πÑ‡∏õ
---
import React from 'react'

type Props = {}

function Home({}: Props) {
  return (
    <div>
      <h1 className='text-2xl'>Home Page</h1>
      <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Assumenda itaque, similique, omnis corporis deleniti laboriosam voluptate veritatis nulla molestiae quo aliquid officia inventore neque suscipit, provident praesentium hic perspiciatis. Rem!</p>
    </div>
  )
}

export default Home

Step 7: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå global.css ‡πÇ‡∏î‡∏¢‡∏•‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á
---
@tailwind base;
@tailwind components;
@tailwind utilities;

-------------------------------------------------------
‚úà DAY 6
-------------------------------------------------------
Section 8: ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Router ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà NextJS 14 AppRouter (‡∏ï‡πà‡∏≠)
Section 9: ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö UI ‡πÉ‡∏ô NextJS 14 ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Tailwind CSS
---
Step 0: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Next.JS 14
---
npx create-next-app@14.1.4

‚úî What is your project named? ‚Ä¶next-tailwind-approuter
‚úî Would you like to use TypeScript? ‚Ä¶ Yes
‚úî Would you like to use ESLint? ‚Ä¶  Yes
‚úî Would you like to use Tailwind CSS? ‚Ä¶ Yes
‚úî Would you like to use `src/` directory? ‚Ä¶ Yes
‚úî Would you like to use App Router? (recommended) ‚Ä¶ Yes
‚úî Would you like to customize the default import alias (@/*)? ‚Ä¶ No

‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ VSCode
---
code next-tailwind-approuter -r

‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏î‡∏π‡∏Å‡πà‡∏≠‡∏ô
---
npm run dev

Step 1: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Library ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥ UI ‡∏î‡πâ‡∏ß‡∏¢ Preline
---
npm i preline@2.1.0

Step 2: Config Preline in tailwind.config.ts
---
module.exports = {
  content: [
      './node_modules/preline/preline.js',
  ],
  plugins: [
      require('preline/plugin'),
  ],
}

Step 3: Create Preline UI JavaScript loader
---
projects_root_directory/
app/components/
PrelineScript.tsx
---
"use client";

import { usePathname } from "next/navigation";
import { useEffect } from "react";

import { IStaticMethods } from "preline/preline";
declare global {
  interface Window {
    HSStaticMethods: IStaticMethods;
  }
}

export default function PrelineScript() {
  const path = usePathname();

  useEffect(() => {
    const loadPreline = async () => {
      await import("preline/preline");

      window.HSStaticMethods.autoInit();
    };

    loadPreline();
  }, [path]);

  return null;
}

Step 4: Add the Preline UI JavaScript loader
---
projects_root_directory/
app/layout.tsx
---
...

import PrelineScript from "./components/PrelineScript";

...

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html>
      ...

      <PrelineScript />
    </html>
  );
}

Step 5: Create Navbar.tsx components
in src/components/front/Navbar.tsx
---
export default function Navbar() {
  return (
    <header className="flex flex-wrap sm:justify-start sm:flex-nowrap z-50 w-full bg-white border-b border-gray-200 text-sm py-3 sm:py-0 dark:bg-gray-800 dark:border-gray-700">
        <nav className="relative max-w-7xl w-full mx-auto px-4 sm:flex sm:items-center sm:justify-between sm:px-6 lg:px-8" aria-label="Global">
            <div className="flex items-center justify-between">
            <a className="flex-none text-xl font-semibold dark:text-white" href="#" aria-label="Brand">NextBrand</a>
            <div className="sm:hidden">
                <button type="button" className="hs-collapse-toggle size-9 flex justify-center items-center text-sm font-semibold rounded-lg border border-gray-200 text-gray-800 hover:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none dark:text-white dark:border-gray-700 dark:hover:bg-gray-700" data-hs-collapse="#navbar-collapse-with-animation" aria-controls="navbar-collapse-with-animation" aria-label="Toggle navigation">
                <svg className="hs-collapse-open:hidden size-4" width={16} height={16} fill="currentColor" viewBox="0 0 16 16">
                    <path fillRule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z" />
                </svg>
                <svg className="hs-collapse-open:block flex-shrink-0 hidden size-4" width={16} height={16} fill="currentColor" viewBox="0 0 16 16">
                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                </svg>
                </button>
            </div>
            </div>
            <div id="navbar-collapse-with-animation" className="hs-collapse hidden overflow-hidden transition-all duration-300 basis-full grow sm:block">
            <div className="flex flex-col gap-y-4 gap-x-0 mt-5 sm:flex-row sm:items-center sm:justify-end sm:gap-y-0 sm:gap-x-7 sm:mt-0 sm:ps-7">
                <a className="font-medium text-blue-600 sm:py-6 dark:text-blue-500" href="#" aria-current="page">Home</a>
                <a className="font-medium text-gray-500 hover:text-gray-400 sm:py-6 dark:text-gray-400 dark:hover:text-gray-500" href="#">About</a>
                <a className="font-medium text-gray-500 hover:text-gray-400 sm:py-6 dark:text-gray-400 dark:hover:text-gray-500" href="#">Blog</a>
                <a className="font-medium text-gray-500 hover:text-gray-400 sm:py-6 dark:text-gray-400 dark:hover:text-gray-500" href="#">Contact</a>
                <div className="hs-dropdown [--strategy:static] sm:[--strategy:fixed] [--adaptive:none] sm:[--trigger:hover] sm:py-4">
                <button type="button" className="flex items-center w-full text-gray-500 hover:text-gray-400 font-medium dark:text-gray-400 dark:hover:text-gray-500 ">
                    More
                    <svg className="ms-2 size-2.5 text-gray-600" width={16} height={16} viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2 5L8.16086 10.6869C8.35239 10.8637 8.64761 10.8637 8.83914 10.6869L15 5" stroke="currentColor" strokeWidth={2} strokeLinecap="round" />
                    </svg>
                </button>
                <div className="hs-dropdown-menu transition-[opacity,margin] duration-[0.1ms] sm:duration-[150ms] hs-dropdown-open:opacity-100 opacity-0 sm:w-48 hidden z-10 bg-white sm:shadow-md rounded-lg p-2 dark:bg-gray-800 sm:dark:border dark:border-gray-700 dark:divide-gray-700 before:absolute top-full sm:border before:-top-5 before:start-0 before:w-full before:h-5">
                    <a className="flex items-center gap-x-3.5 py-2 px-3 rounded-lg text-sm text-gray-800 hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-300" href="#">
                    About
                    </a>
                    <div className="hs-dropdown relative [--strategy:static] sm:[--strategy:absolute] [--adaptive:none] sm:[--trigger:hover]">
                    <button type="button" className="w-full flex justify-between items-center text-sm text-gray-800 rounded-lg py-2 px-3 hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-300">
                        Sub Menu
                        <svg className="sm:-rotate-90 ms-2 size-2.5 text-gray-600" width={16} height={16} viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M2 5L8.16086 10.6869C8.35239 10.8637 8.64761 10.8637 8.83914 10.6869L15 5" stroke="currentColor" strokeWidth={2} strokeLinecap="round" />
                        </svg>
                    </button>
                    <div className="hs-dropdown-menu transition-[opacity,margin] duration-[0.1ms] sm:duration-[150ms] hs-dropdown-open:opacity-100 opacity-0 sm:w-48 hidden z-10 sm:mt-2 bg-white sm:shadow-md rounded-lg p-2 dark:bg-gray-800 sm:dark:border dark:border-gray-700 dark:divide-gray-700 before:absolute sm:border before:-end-5 before:top-0 before:h-full before:w-5 top-0 end-full !mx-[10px]">
                        <a className="flex items-center gap-x-3.5 py-2 px-3 rounded-lg text-sm text-gray-800 hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-300" href="#">
                        About
                        </a>
                        <a className="flex items-center gap-x-3.5 py-2 px-3 rounded-lg text-sm text-gray-800 hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-300" href="#">
                        Downloads
                        </a>
                        <a className="flex items-center gap-x-3.5 py-2 px-3 rounded-lg text-sm text-gray-800 hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-300" href="#">
                        Team Account
                        </a>
                    </div>
                    </div>
                    <a className="flex items-center gap-x-3.5 py-2 px-3 rounded-lg text-sm text-gray-800 hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-300" href="#">
                    Downloads
                    </a>
                    <a className="flex items-center gap-x-3.5 py-2 px-3 rounded-lg text-sm text-gray-800 hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-300" href="#">
                    Team Account
                    </a>
                </div>
                </div>
                <a className="flex items-center gap-x-2 font-medium text-gray-500 hover:text-blue-600 sm:border-s sm:border-gray-300 sm:my-6 sm:ps-6 dark:border-gray-700 dark:text-gray-400 dark:hover:text-blue-500" href="#">
                <svg className="flex-shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width={16} height={16} fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z" />
                </svg>
                Log in
                </a>
            </div>
            </div>
        </nav>
    </header>
  )
}

Step 6: Use Navbar in src/app/(front)/layout.tsx
---
<body className={inter.className}>
    <Navbar />
</body>

Step 7: Create Footer.tsx
---
export default function Footer() {
  return (
    <footer className="mt-auto bg-gray-900 w-full">
        <div className="mt-auto w-full max-w-[85rem] py-10 px-4 sm:px-6 lg:px-8 lg:pt-20 mx-auto">
            {/* Grid */}
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-6">
            <div className="col-span-full lg:col-span-1">
                <a className="flex-none text-xl font-semibold text-white" href="#" aria-label="Brand">NextBrand</a>
            </div>
            {/* End Col */}
            <div className="col-span-1">
                <h4 className="font-semibold text-gray-100">Product</h4>
                <div className="mt-3 grid space-y-3">
                <p><a className="inline-flex gap-x-2 text-gray-400 hover:text-gray-200" href="#">Pricing</a></p>
                <p><a className="inline-flex gap-x-2 text-gray-400 hover:text-gray-200" href="#">Changelog</a></p>
                <p><a className="inline-flex gap-x-2 text-gray-400 hover:text-gray-200" href="#">Docs</a></p>
                </div>
            </div>
            {/* End Col */}
            <div className="col-span-1">
                <h4 className="font-semibold text-gray-100">Company</h4>
                <div className="mt-3 grid space-y-3">
                <p><a className="inline-flex gap-x-2 text-gray-400 hover:text-gray-200" href="#">About us</a></p>
                <p><a className="inline-flex gap-x-2 text-gray-400 hover:text-gray-200" href="#">Blog</a></p>
                <p><a className="inline-flex gap-x-2 text-gray-400 hover:text-gray-200" href="#">Careers</a> <span className="inline ms-1 text-xs bg-blue-700 text-white py-1 px-2 rounded-lg">We're hiring</span></p>
                <p><a className="inline-flex gap-x-2 text-gray-400 hover:text-gray-200" href="#">Customers</a></p>
                </div>
            </div>
            {/* End Col */}
            <div className="col-span-2">
                <h4 className="font-semibold text-gray-100">Stay up to date</h4>
                <form>
                <div className="mt-4 flex flex-col items-center gap-2 sm:flex-row sm:gap-3 bg-white rounded-lg p-2 dark:bg-gray-800">
                    <div className="w-full">
                    <label htmlFor="hero-input" className="sr-only">Search</label>
                    <input type="text" id="hero-input" name="hero-input" className="py-3 px-4 block w-full border-transparent rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-slate-900 dark:border-transparent dark:text-gray-400 dark:focus:ring-gray-600" placeholder="Enter your email" />
                    </div>
                    <a className="w-full sm:w-auto whitespace-nowrap p-3 inline-flex justify-center items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none" href="#">
                    Subscribe
                    </a>
                </div>
                <p className="mt-3 text-sm text-gray-400">
                    New UI kits or big discounts. Never spam.
                </p>
                </form>
            </div>
            {/* End Col */}
            </div>
            {/* End Grid */}
            <div className="mt-5 sm:mt-12 grid gap-y-2 sm:gap-y-0 sm:flex sm:justify-between sm:items-center">
            <div className="flex justify-between items-center">
                <p className="text-sm text-gray-400">¬© 2022 Preline. All rights reserved.</p>
            </div>
            {/* End Col */}
            {/* Social Brands */}
            <div>
                <a className="size-10 inline-flex justify-center items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent text-white hover:bg-white/10 disabled:opacity-50 disabled:pointer-events-none focus:outline-none focus:ring-1 focus:ring-gray-600" href="#">
                <svg className="flex-shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width={16} height={16} fill="currentColor" viewBox="0 0 16 16">
                    <path d="M16 8.049c0-4.446-3.582-8.05-8-8.05C3.58 0-.002 3.603-.002 8.05c0 4.017 2.926 7.347 6.75 7.951v-5.625h-2.03V8.05H6.75V6.275c0-2.017 1.195-3.131 3.022-3.131.876 0 1.791.157 1.791.157v1.98h-1.009c-.993 0-1.303.621-1.303 1.258v1.51h2.218l-.354 2.326H9.25V16c3.824-.604 6.75-3.934 6.75-7.951z" />
                </svg>
                </a>
                <a className="size-10 inline-flex justify-center items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent text-white hover:bg-white/10 disabled:opacity-50 disabled:pointer-events-none focus:outline-none focus:ring-1 focus:ring-gray-600" href="#">
                <svg className="flex-shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width={16} height={16} fill="currentColor" viewBox="0 0 16 16">
                    <path d="M15.545 6.558a9.42 9.42 0 0 1 .139 1.626c0 2.434-.87 4.492-2.384 5.885h.002C11.978 15.292 10.158 16 8 16A8 8 0 1 1 8 0a7.689 7.689 0 0 1 5.352 2.082l-2.284 2.284A4.347 4.347 0 0 0 8 3.166c-2.087 0-3.86 1.408-4.492 3.304a4.792 4.792 0 0 0 0 3.063h.003c.635 1.893 2.405 3.301 4.492 3.301 1.078 0 2.004-.276 2.722-.764h-.003a3.702 3.702 0 0 0 1.599-2.431H8v-3.08h7.545z" />
                </svg>
                </a>
                <a className="size-10 inline-flex justify-center items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent text-white hover:bg-white/10 disabled:opacity-50 disabled:pointer-events-none focus:outline-none focus:ring-1 focus:ring-gray-600" href="#">
                <svg className="flex-shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width={16} height={16} fill="currentColor" viewBox="0 0 16 16">
                    <path d="M5.026 15c6.038 0 9.341-5.003 9.341-9.334 0-.14 0-.282-.006-.422A6.685 6.685 0 0 0 16 3.542a6.658 6.658 0 0 1-1.889.518 3.301 3.301 0 0 0 1.447-1.817 6.533 6.533 0 0 1-2.087.793A3.286 3.286 0 0 0 7.875 6.03a9.325 9.325 0 0 1-6.767-3.429 3.289 3.289 0 0 0 1.018 4.382A3.323 3.323 0 0 1 .64 6.575v.045a3.288 3.288 0 0 0 2.632 3.218 3.203 3.203 0 0 1-.865.115 3.23 3.23 0 0 1-.614-.057 3.283 3.283 0 0 0 3.067 2.277A6.588 6.588 0 0 1 .78 13.58a6.32 6.32 0 0 1-.78-.045A9.344 9.344 0 0 0 5.026 15z" />
                </svg>
                </a>
                <a className="size-10 inline-flex justify-center items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent text-white hover:bg-white/10 disabled:opacity-50 disabled:pointer-events-none focus:outline-none focus:ring-1 focus:ring-gray-600" href="#">
                <svg className="flex-shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width={16} height={16} fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z" />
                </svg>
                </a>
                <a className="size-10 inline-flex justify-center items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent text-white hover:bg-white/10 disabled:opacity-50 disabled:pointer-events-none focus:outline-none focus:ring-1 focus:ring-gray-600" href="#">
                <svg className="flex-shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width={16} height={16} fill="currentColor" viewBox="0 0 16 16">
                    <path d="M3.362 10.11c0 .926-.756 1.681-1.681 1.681S0 11.036 0 10.111C0 9.186.756 8.43 1.68 8.43h1.682v1.68zm.846 0c0-.924.756-1.68 1.681-1.68s1.681.756 1.681 1.68v4.21c0 .924-.756 1.68-1.68 1.68a1.685 1.685 0 0 1-1.682-1.68v-4.21zM5.89 3.362c-.926 0-1.682-.756-1.682-1.681S4.964 0 5.89 0s1.68.756 1.68 1.68v1.682H5.89zm0 .846c.924 0 1.68.756 1.68 1.681S6.814 7.57 5.89 7.57H1.68C.757 7.57 0 6.814 0 5.89c0-.926.756-1.682 1.68-1.682h4.21zm6.749 1.682c0-.926.755-1.682 1.68-1.682.925 0 1.681.756 1.681 1.681s-.756 1.681-1.68 1.681h-1.681V5.89zm-.848 0c0 .924-.755 1.68-1.68 1.68A1.685 1.685 0 0 1 8.43 5.89V1.68C8.43.757 9.186 0 10.11 0c.926 0 1.681.756 1.681 1.68v4.21zm-1.681 6.748c.926 0 1.682.756 1.682 1.681S11.036 16 10.11 16s-1.681-.756-1.681-1.68v-1.682h1.68zm0-.847c-.924 0-1.68-.755-1.68-1.68 0-.925.756-1.681 1.68-1.681h4.21c.924 0 1.68.756 1.68 1.68 0 .926-.756 1.681-1.68 1.681h-4.21z" />
                </svg>
                </a>
            </div>
            {/* End Social Brands */}
            </div>
        </div>
    </footer>
  )
}

Step 8: Use Footer in src/app/(front)/layout.tsx
---
<body className={inter.className}>
    <Navbar />
            {children}
     <Footer />
</body>

Step 9: Edit src/app/(front)/home/Home.tsx Add "Hero Sections"
---

-------------------------------------------------------
‡∏Ç‡∏∂‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Material UI (MUI)
-------------------------------------------------------
Step 1: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Next.JS 14
---
npx create-next-app@14.1.4

‚úî What is your project named? ‚Ä¶next-store-app
‚úî Would you like to use TypeScript? ‚Ä¶ Yes
‚úî Would you like to use ESLint? ‚Ä¶  Yes
‚úî Would you like to use Tailwind CSS? ‚Ä¶ Yes
‚úî Would you like to use `src/` directory? ‚Ä¶ Yes
‚úî Would you like to use App Router? (recommended) ‚Ä¶ Yes
‚úî Would you like to customize the default import alias (@/*)? ‚Ä¶ No

Step 2: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Library ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ UI ‡∏î‡πâ‡∏ß‡∏¢ MUI
---
npm i @emotion/cache@11.11.0
npm i @emotion/react@11.11.3
npm i @emotion/styled@11.11.0
npm i @fontsource/roboto@5.0.8
npm i @mui/icons-material@5.15.11
npm i @mui/material@5.15.11
npm i @mui/material-nextjs@5.15.11

-------------------------------------------------------
‚úà DAY 7
-------------------------------------------------------
Section 10: NextJS 14 MUI (‡∏ï‡πà‡∏≠)
Section 11: React Hook Form with Yup
Section 12: Auth ‡πÉ‡∏ô NextJS 14

Step: 1 ‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå next-store-app
---
next-store-app
|- public
|- src
   |-- app
       |-- (auth)
           |-- _authForms
           |-- forgotpass
           |-- login
           |-- register
           |-- twostep
           |-- types
           \-- layout.tsx
       |-- (back)
           |-- backend
           \-- layout.tsx
       |-- (front)
           |-- about
           |-- blog
           |-- contact
           |-- home
           |-- page.tsx
           \-- layout.tsx
       |-- components
           |-- forms
           |   |-- theme-elements
           |   |   |-- CustomCheckbox.tsx
           |   |   |-- CustomFormLabel.tsx
           |   |   |-- CustomSocialButton.tsx
           |   |   \-- CustomTextField.tsx
           \-- front
               |-- animation
               |-- banner
               |-- footer
               |-- frameworks
               \-- header
       |-- themes
           |-- Colors.ts
           |-- Shadows.ts
           |-- Theme.ts
           \-- Typography.ts
       |-- favicon.ico
       |-- globals.css
       |-- layout.tsx
       |-- not-found.tsx
   |-- next.config.mjs
   |-- package.json
   |-- tsconfig.json


Step 2: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Libray ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥ Animation
---
npm install framer-motion@10.16.4

Step 3: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Library React implementation of the Intersection Observer API 
---
npm i react-intersection-observer@9.5.2